package park.event;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

public class EventPaginationDAO {
	private static final String jdbcURL = "jdbc:oracle:thin:@localhost:1521:xe";
	private static final String username = "kiga";
	private static final String password = "kiga1234";
	public List<EventPosting> getAllProducts(int pageNumber, int pageSize){
    	List<EventPosting> EventPaginationList = new ArrayList<>();
        int start = EventPaginationUtil.paginationStart(pageNumber, pageSize);
        int end = EventPaginationUtil.paginationEnd(pageNumber, pageSize);
		
		try {
			Class.forName("oracle.jdbc.OracleDriver");
			 Connection conn = DriverManager.getConnection(jdbcURL, username, password);
	            String sql = "SELECT * FROM (SELECT e.*, ROWNUM AS rnum FROM (SELECT * FROM event ORDER BY event_number) e WHERE ROWNUM <= ?) WHERE rnum >= ?";
	           /*
			 * String sql = "SELCT * FROM products " //products 테이블에서
						+ "ORDER BY product_id "  //product_id 기준으로 정렬할 것 임
						// 지정된 OFFSET FETCH NEXT페이지를 가지고 옴
						+ "OFFSET ? " // OFFSET : 가져오기를 시작할 행의 위치 나타냄
						+ "ROWS FETCH NEXT? " //FETCH NEXT : 다음에 가져올 행의 수 지정
						+ "ROWS ONLY";
			*/
	         PreparedStatement ps = conn.prepareStatement(sql);
	         ps.setInt(1, end);
	         ps.setInt(2, start);

			
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				EventPagination eventPagination = new EventPagination();
				eventPagination.setEvent_number(rs.getInt("event_number"));
				eventPagination.setEvent_name(rs.getString("event_name"));
				eventPagination.setEvent_day(rs.getString("event_day"));
				eventPagination.setEvent_time(rs.getString("event_time"));
				eventPagination.setEvent_location(rs.getString("event_location"));
				eventPagination.setEvent_price(rs.getDouble("event_price"));
				
				 Blob blob = rs.getBlob("event_img");
                 byte[] imageBytes = blob.getBytes(1, (int) blob.length());

                 String imageBase64 = java.util.Base64.getEncoder().encodeToString(imageBytes);
                 String event_img = ("data:image/jpeg;base64, " + imageBase64);
                 eventPagination.setEvent_img(event_img);
				eventPagination.setEvent_explain(rs.getString("event_explain"));
				EventPaginationList.add(eventPagination);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return EventPaginationList;
	}

	
	//2. 전체 제품 수를 가지고 오는 메서드
	public int getTotalProducts() {
		int totalProducts = 0;
		try {
			Class.forName("oracle.jdbc.OracleDriver");
			Connection conn = DriverManager.getConnection(jdbcURL, username, password);
			
			String sql= "SELECT COUNT(*) AS total FROM event";
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				totalProducts = rs.getInt("total");
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return totalProducts;
	}
}

