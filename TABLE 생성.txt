--유저 생성
sqlplus sys/oracle as sysdba;
alter session set "_oracle_script"=true;
create user kiga identified by kiga1234;
grant create session to kiga;
grant connect, resource, dba to kiga;
--테이블 생성
DROP SEQUENCE RESERVATION_SEQ;
DROP TRIGGER RESERVATION_TRIGGER;
DROP SEQUENCE EVENT_SEQ;
DROP TRIGGER EVENT_TRIGGER;
DROP SEQUENCE QNA_SEQ;
DROP TRIGGER QNA_TRIGGER;
DROP SEQUENCE REVIEW_SEQ;
DROP TRIGGER REVIEW_TRIGGER;
DROP table qna cascade CONSTRAINTS;
DROP TABLE reservation cascade CONSTRAINTS;
DROP TABLE review cascade CONSTRAINTS;
DROP TABLE users cascade CONSTRAINTS;
DROP TABLE event cascade CONSTRAINTS;

CREATE TABLE qna (
 qna_number number(10) NOT NULL,
 event_number number(10) NOT NULL,
 qna_title varchar2(200) NOT NULL,
 qna_content varchar2(500) NOT NULL,
 qna_password number(4) NOT NULL,
 qna_name varchar2(30) NULL,
 qna_date DATE NULL,
 qna_reply varchar2(500) NULL,
 qna_email varchar2(200) NOT NULL
);
CREATE TABLE reservation (
 r_id number(8) NOT NULL,
 r_email varchar2(200) NOT NULL,
 r_phonenumber varchar2(15) NOT NULL,
 total number(10,2) NULL,
 person number(3) NOT NULL,
 event_number number(10) NOT NULL
);
CREATE TABLE review (
 review_number number(38) NOT NULL,
 r_id number(8) NOT NULL,
 review varchar2(500) NOT NULL,
 review_title varchar2(50) NOT NULL,
 review_date Date NULL
);
CREATE TABLE users (
 email varchar2(200) NOT NULL,
 name varchar2(15) NOT NULL,
 phonenumber varchar2(15) NOT NULL,
 password varchar2(32) NOT NULL
 passwordcheck varchar2(32) NOT NULL
);
CREATE TABLE event (
 event_number number(10) NOT NULL,
 event_name varchar2(100) NOT NULL,
 event_day VARCHAR2(100) NOT NULL,
 event_time VARCHAR2(100) NULL,
 event_location varchar2(200) NOT NULL,
 event_price number(10,2) NULL,
 event_age number(3,0) NULL,
 event_img BLOB NULL,
 event_explain VARCHAR2(500) NULL
);
ALTER TABLE qna ADD CONSTRAINT PK_QNA PRIMARY KEY (
 qna_number,
 event_number
);
ALTER TABLE reservation ADD CONSTRAINT PK_RESERVATION PRIMARY KEY (
 r_id
);
ALTER TABLE review ADD CONSTRAINT PK_REVIEW PRIMARY KEY (
 review_number,
 r_id
);
ALTER TABLE users ADD CONSTRAINT PK_USERS PRIMARY KEY (
 email
);
ALTER TABLE event ADD CONSTRAINT PK_EVENT PRIMARY KEY (
 event_number
);
ALTER TABLE qna ADD CONSTRAINT FK_event_TO_qna_1 FOREIGN KEY (
 event_number
)
REFERENCES event (
 event_number
);
ALTER TABLE review ADD CONSTRAINT FK_reservation_TO_review_1 FOREIGN KEY (
 r_id
)
REFERENCES reservation (
 r_id
);




--예약 시퀸스
CREATE SEQUENCE reservation_seq
       INCREMENT BY 1
       START WITH 1
       MINVALUE 1
       NOCYCLE
       NOCACHE
       NOORDER;
     /   
CREATE OR REPLACE NONEDITIONABLE TRIGGER reservation_trigger
    BEFORE INSERT ON reservation
    FOR EACH ROW
    BEGIN
        SELECT  reservation_seq.NEXTVAL
        INTO : NEW.r_id
        FROM dual;
    END;
    /
-- 행사 시퀸스
CREATE SEQUENCE event_seq
       INCREMENT BY 1
       START WITH 1
       MINVALUE 1
       NOCYCLE
       NOCACHE
       NOORDER;
       / 
CREATE OR REPLACE NONEDITIONABLE TRIGGER event_trigger
    BEFORE INSERT ON event
    FOR EACH ROW
    BEGIN
        SELECT  event_seq.NEXTVAL
        INTO : NEW.event_number
        FROM dual;
    END;
    /
-- 후기 시퀀스
CREATE SEQUENCE review_seq
       INCREMENT BY 1
       START WITH 1
       MINVALUE 1
       NOCYCLE
       NOCACHE
       NOORDER;
        /
create or replace NONEDITIONABLE TRIGGER review_trigger
    BEFORE INSERT ON review
    FOR EACH ROW
    BEGIN
        SELECT  review_seq.NEXTVAL
        INTO : NEW.review_number
        FROM dual;
    END;
    /
--문의 시퀀스
CREATE SEQUENCE qna_seq
       INCREMENT BY 1
       START WITH 1
       MINVALUE 1
       NOCYCLE
       NOCACHE
       NOORDER;
       / 
create or replace NONEDITIONABLE TRIGGER qna_trigger
    BEFORE INSERT ON qna
    FOR EACH ROW
    BEGIN
        SELECT  qna_seq.NEXTVAL
        INTO : NEW.qna_number
        FROM dual;
    END;
    /